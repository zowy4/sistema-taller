datasource db {
  
  provider = "postgresql"
  url      = env("DATABASE_URL") // Esto se carga desde un archivo .env
}

generator client {
  provider = "prisma-client-js"
}


// Modelo basado en tu tabla "Clientes"
model Clientes {
  id_cliente  Int      @id @default(autoincrement())
  nombre      String
  apellido    String
  empresa     String? // El '?' significa que es nullable (opcional)
  telefono    String
  email       String   @unique // Buena práctica hacer el email único
  password    String?  // contraseña hasheada (nullable para compatibilidad)
  direccion   String
  fecha_alta  DateTime @default(now()) // Se genera automáticamente

  // --- Relaciones ---
  // Un cliente puede tener múltiples vehículos 
  vehiculos   Vehiculos[]
  
  // Un cliente puede tener múltiples órdenes de trabajo
  ordenes_trabajo OrdenesDeTrabajo[]
}

// Modelo basado en tu tabla "Vehículos"
model Vehiculos {
  id_vehiculo Int      @id @default(autoincrement())
  placa       String   @unique
  vin         String   @unique
  marca       String
  modelo      String
  anio        Int
  detalles    String?

  // --- Relaciones (la FK) ---
  id_cliente  Int // El campo de la clave foránea
  
  // La definición de la relación con Prisma
  cliente     Clientes @relation(fields: [id_cliente], references: [id_cliente])

  // Un vehículo puede estar en múltiples órdenes de trabajo
  ordenes_trabajo OrdenesDeTrabajo[]
  
  // Relación con el historial
  historial Historial_Vehiculo[]
}

// Modelo basado en tu tabla "Empleados"
model Empleados {
  id_empleado   Int      @id @default(autoincrement())
  nombre        String
  apellido      String
  email         String?  @unique
  password      String?
  rol           String   // (técnico, recepción, etc)
  fecha_ingreso DateTime @default(now())
  activo        Boolean  @default(true)

  // Relación: Un empleado puede estar a cargo de muchas órdenes
  ordenes_responsable OrdenesDeTrabajo[]
}

// Modelo basado en tu tabla "Órdenes de Trabajo"
model OrdenesDeTrabajo {
  id_orden                Int      @id @default(autoincrement())
  fecha_apertura          DateTime @default(now())
  fecha_entrega_estimada  DateTime
  fecha_entrega_real      DateTime? // nullable
  estado                  String    // (pendiente, en proceso, etc)
  total_estimado          Float
  total_real              Float?    // nullable
  
  // --- Relaciones (FKs) ---
  id_cliente  Int
  cliente     Clientes @relation(fields: [id_cliente], references: [id_cliente])

  id_vehiculo Int
  vehiculo    Vehiculos @relation(fields: [id_vehiculo], references: [id_vehiculo])

  id_empleado_responsable Int
  empleado_responsable  Empleados @relation(fields: [id_empleado_responsable], references: [id_empleado])

  // Relaciones "muchos a muchos" (tablas pivote)
  servicios_asignados Ordenes_Servicios[]
  repuestos_usados    Ordenes_Repuestos[]

  // Relación a Facturas
  factura     Facturas? // Una orden puede tener una factura

  // Relación con el historial
  historial   Historial_Vehiculo[]
}


// --- Modelos para el resto de tus tablas ---
// (He incluido el esquema completo basado en tu diseño)

model Repuestos {
  id_repuesto         Int      @id @default(autoincrement())
  nombre              String   @unique
  descripcion         String?
  unidad_medida       String
  cantidad_existente  Int
  precio_unitario     Float
  nivel_minimo_alerta Int

  // Relación: Un repuesto puede estar en muchas órdenes
  ordenes_donde_usa   Ordenes_Repuestos[]
}

model Servicios {
  id_servicio     Int      @id @default(autoincrement())
  nombre          String   @unique
  descripcion     String?
  precio_estandar Float
  activo          Boolean  @default(true)

  // Relación: Un servicio puede estar en muchas órdenes
  ordenes_donde_aplica Ordenes_Servicios[]
}

// --- Tablas Pivote (Muchos a Muchos) ---

// Tu tabla "Órdenes_Servicios"
model Ordenes_Servicios {
  id          Int   @id @default(autoincrement())
  cantidad    Int
  precio_unitario Float // Precio al momento de la orden
  subtotal    Float

  // Relación a Órdenes
  id_orden    Int
  orden       OrdenesDeTrabajo @relation(fields: [id_orden], references: [id_orden])

  // Relación a Servicios
  id_servicio Int
  servicio    Servicios @relation(fields: [id_servicio], references: [id_servicio])
  
  @@unique([id_orden, id_servicio]) // Evita duplicados en la misma orden
}

// Tu tabla "Órdenes_Repuestos"
model Ordenes_Repuestos {
  id          Int   @id @default(autoincrement())
  cantidad    Int
  precio_unitario Float // Precio al momento de la orden
  subtotal    Float

  // Relación a Órdenes
  id_orden    Int
  orden       OrdenesDeTrabajo @relation(fields: [id_orden], references: [id_orden])

  // Relación a Repuestos
  id_repuesto Int
  repuesto    Repuestos @relation(fields: [id_repuesto], references: [id_repuesto])

  @@unique([id_orden, id_repuesto]) // Evita duplicados
}

// Modelo basado en tu tabla "Facturas / Pagos"
model Facturas {
  id_factura   Int      @id @default(autoincrement())
  fecha_factura DateTime @default(now())
  monto         Float
  estado_pago   String   // (pagada, pendiente)
  metodo_pago   String?

  // --- Relación (1 a 1 con Orden) ---
  id_orden    Int      @unique // Asegura que una orden solo tenga una factura
  orden       OrdenesDeTrabajo @relation(fields: [id_orden], references: [id_orden])
}

// Historial (Este es opcional si ya tienes las órdenes,
// pero lo incluyo como lo diseñaste)
model Historial_Vehiculo {
  id_hist     Int      @id @default(autoincrement())
  fecha       DateTime
  kilometraje Int
  notas       String?

  id_vehiculo Int
  vehiculo    Vehiculos @relation(fields: [id_vehiculo], references: [id_vehiculo])

  id_orden    Int
  orden       OrdenesDeTrabajo @relation(fields: [id_orden], references: [id_orden])
}